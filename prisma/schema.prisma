// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

////////////////////////////////////////////////////////////////

model Users {
  id               Int       @id @default(autoincrement())
  username         String    @unique
  email            String    @unique
  password         String
  number           String? // ✅ Phone number (optional)
  image            String? // ✅ Profile image URL (optional)
  jobTitle         String? // ✅ Job title (optional)
  bio              String? // ✅ Short bio (optional)
  isBanned         Boolean   @default(false)
  isVerified       Boolean   @default(false)
  verificationCode String?
  codeExpiresAt    DateTime?
  role             Role      @default(USER)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  favorites Product[]  @relation("UserFavorites")
  cartItems CartItem[]
  orders    Order[] 
}

enum Role {
  USER
  ADMIN
  ACCOUNTANT
  MAINTENANCE
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum TransactionType {
  SALE
  RENT
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

////////////////////////////////////////////////////////////////

model Product {
  id               Int      @id @default(autoincrement())
  nameEn           String
  nameAr           String
  company          String
  category         String
  description      String
  rate             Float    @default(0)
  rentPrice        Float?
  sellPrice        Float?
  availableForRent Boolean  @default(false)
  availableForSale Boolean  @default(false)
  rentStock        Int      @default(0)
  saleStock        Int      @default(0)
  images           String[] // Array of image URLs
  qrCode           String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  favoritedBy Users[]        @relation("UserFavorites")
  cartItems   CartItem[]
  videos      ProductVideo[] // Better naming
  OrderItem   OrderItem[]
}

////////////////////////////////////////////////////////////////

model CartItem {
  id        Int      @id @default(autoincrement())
  user      Users    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)
  transactionType TransactionType 
  addedAt   DateTime @default(now())

  @@unique([userId, productId]) // Prevent duplicate entries
}

////////////////////////////////////////////////////////////////

model ProductVideo {
  id        Int     @id @default(autoincrement())
  name      String
  bio       String
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@map("product_videos") // ✅ maps model to DB table
}

model Order {
  id              Int         @id @default(autoincrement())
  user            Users       @relation(fields: [userId], references: [id])
  userId          Int
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  shippingAddress String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  items   OrderItem[]
  payment Payment?

  @@map("orders")
}

model OrderItem {
  id                       Int             @id @default(autoincrement())
  order                    Order           @relation(fields: [orderId], references: [id])
  orderId                  Int
  product                  Product         @relation(fields: [productId], references: [id])
  productId                Int
  quantity                 Int
  transactionType          TransactionType // To distinguish between SALE and RENT
  priceAtTimeOfTransaction Float // CRUCIAL: Price of a single unit at the time of order

  // Fields specific to rentals
  rentalStartDate DateTime?
  rentalEndDate   DateTime?
  returnDate      DateTime? // To mark when the item was actually returned

  @@map("order_items")
}

model Payment {
  id            Int           @id @default(autoincrement())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       Int           @unique // An order has one payment
  amount        Float
  paymentMethod String // e.g., 'Credit Card', 'PayPal'
  status        PaymentStatus @default(PENDING)
  transactionId String? // The ID from your payment provider (e.g., Stripe)
  createdAt     DateTime      @default(now())

  @@map("payments")
}
