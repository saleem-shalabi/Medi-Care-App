// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

////////////////////////////////////////////////////////////////

model Users {
  id               Int       @id @default(autoincrement())
  username         String    @unique
  email            String    @unique
  password         String
  number           String? // ✅ Phone number (optional)
  image            String? // ✅ Profile image URL (optional)
  jobTitle         String? // ✅ Job title (optional)
  bio              String? // ✅ Short bio (optional)
  isBanned         Boolean   @default(false)
  isVerified       Boolean   @default(false)
  verificationCode String?
  codeExpiresAt    DateTime?
  role             Role      @default(USER)
  session    ChatSession?
  messages   ChatMessage[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  favorites Product[]  @relation("UserFavorites")
  cartItems CartItem[] // ✅ Relation to CartItem
}

enum Role {
  USER
  ADMIN
  ACCOUNTANT
  MAINTENANCE
}

////////////////////////////////////////////////////////////////

model Product {
  id               Int      @id @default(autoincrement())
  nameEn           String
  nameAr           String
  company          String
  category         String
  description      String
  rate             Float    @default(0)
  rentPrice        Float?
  sellPrice        Float?
  availableForRent Boolean  @default(false)
  availableForSale Boolean  @default(false)
  rentStock        Int      @default(0)
  saleStock        Int      @default(0)
  images           String[] // Array of image URLs
  qrCode           String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  usageInstructions      String?   
  maintenanceGuidelines  String?   

  // Relations
  favoritedBy Users[]        @relation("UserFavorites")
  cartItems   CartItem[]
  videos      ProductVideo[] // Better naming
}

////////////////////////////////////////////////////////////////

model CartItem {
  id        Int      @id @default(autoincrement())
  user      Users    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)
  addedAt   DateTime @default(now())

  @@unique([userId, productId]) // Prevent duplicate entries
}

////////////////////////////////////////////////////////////////

model ProductVideo {
  id        Int     @id @default(autoincrement())
  name      String
  bio       String
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@map("product_videos") // ✅ maps model to DB table
}

model ChatSession {
  id        String        @id @default(cuid())
  user      Users         @relation(fields: [userId], references: [id])
  userId    Int           @unique     // ✅ جلسة واحدة لكل مستخدم
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]
}

model ChatMessage {
  id         String       @id @default(cuid())
  session    ChatSession  @relation(fields: [sessionId], references: [id])
  sessionId  String

  // مرسل الرسالة الحقيقي (null لرسائل المساعد)
  sender     Users?       @relation(fields: [userId], references: [id])
  userId     Int?

  isUser     Boolean    
  content    String
  createdAt  DateTime     @default(now())

  @@index([sessionId])
  @@index([userId])
}